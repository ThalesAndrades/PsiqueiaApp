#!/usr/bin/env node

/**
 * üîÑ CONFIGURADOR AVAN√áADO DE WORKFLOWS DO XCODE CLOUD
 * 
 * Cria workflows otimizados para diferentes cen√°rios de desenvolvimento
 */

const fs = require('fs');
const path = require('path');

class XcodeCloudWorkflowManager {
    constructor() {
        this.projectRoot = process.cwd();
        this.workflowsDir = path.join(this.projectRoot, 'xcode-cloud-configs', 'workflows');
        
        this.projectInfo = {
            appName: 'PsiqueiaApp',
            bundleId: 'com.psiqueia.app',
            scheme: 'PsiqueiaApp',
            workspace: 'ios/PsiqueiaApp.xcworkspace',
            apiKeyId: '5D79LKKR26'
        };
    }

    async createAllWorkflows() {
        console.log('üîÑ CRIANDO WORKFLOWS AVAN√áADOS DO XCODE CLOUD\n');
        
        await this.ensureDirectories();
        await this.createDevelopmentWorkflow();
        await this.createStagingWorkflow();
        await this.createProductionWorkflow();
        await this.createHotfixWorkflow();
        await this.createReleaseWorkflow();
        await this.createMainWorkflowFile();
        await this.createWorkflowDocumentation();
        
        console.log('\n‚úÖ TODOS OS WORKFLOWS CRIADOS COM SUCESSO!');
        console.log('\nüìã WORKFLOWS DISPON√çVEIS:');
        console.log('1. üîß Development - Builds de desenvolvimento e testes');
        console.log('2. üß™ Staging - Builds para TestFlight');
        console.log('3. üöÄ Production - Builds para App Store');
        console.log('4. üî• Hotfix - Corre√ß√µes urgentes');
        console.log('5. üì¶ Release - Prepara√ß√£o de releases');
    }

    async ensureDirectories() {
        if (!fs.existsSync(this.workflowsDir)) {
            fs.mkdirSync(this.workflowsDir, { recursive: true });
        }
    }

    async createDevelopmentWorkflow() {
        console.log('üîß Criando workflow de desenvolvimento...');
        
        const workflow = {
            name: "Development Build",
            description: "Build r√°pido para desenvolvimento com testes b√°sicos",
            trigger: {
                push: {
                    branches: ["develop", "feature/*", "bugfix/*"]
                },
                pull_request: {
                    branches: ["develop"]
                }
            },
            environment: {
                xcode: "15.2",
                node: "18.x",
                variables: [
                    { name: "NODE_ENV", value: "development" },
                    { name: "CI", value: "true" },
                    { name: "EXPO_PUBLIC_ENV", value: "development" }
                ]
            },
            steps: [
                {
                    name: "Cache Node Modules",
                    script: `set -e
echo "üì¶ Configurando cache do Node.js..."
npm ci --cache .npm --prefer-offline`
                },
                {
                    name: "Install Dependencies",
                    script: `set -e
echo "üîß Instalando depend√™ncias..."
npm ci
npx expo install --fix`
                },
                {
                    name: "Lint and Format Check",
                    script: `set -e
echo "üßπ Verificando c√≥digo..."
npm run lint || echo "‚ö†Ô∏è Lint warnings encontrados"
npm run format:check || echo "‚ö†Ô∏è Formata√ß√£o precisa ser ajustada"`
                },
                {
                    name: "Run Unit Tests",
                    script: `set -e
echo "üß™ Executando testes unit√°rios..."
npm test -- --coverage --watchAll=false`
                },
                {
                    name: "Generate iOS Project",
                    script: `set -e
echo "üì± Gerando projeto iOS para desenvolvimento..."
npx expo prebuild --platform ios --clean --no-install`
                },
                {
                    name: "Install CocoaPods",
                    script: `set -e
echo "üç´ Instalando CocoaPods..."
cd ios
pod install --repo-update
cd ..`
                },
                {
                    name: "Build for Simulator",
                    script: `set -e
echo "üèóÔ∏è Construindo para simulador..."
cd ios
xcodebuild -workspace ${this.projectInfo.workspace} \\
  -scheme ${this.projectInfo.scheme} \\
  -configuration Debug \\
  -destination 'platform=iOS Simulator,name=iPhone 15' \\
  build`
                }
            ]
        };
        
        const filePath = path.join(this.workflowsDir, 'development.json');
        fs.writeFileSync(filePath, JSON.stringify(workflow, null, 2));
        console.log(`  ‚úÖ Salvo em: ${filePath}`);
    }

    async createStagingWorkflow() {
        console.log('üß™ Criando workflow de staging...');
        
        const workflow = {
            name: "Staging Build",
            description: "Build para TestFlight com testes completos",
            trigger: {
                push: {
                    branches: ["staging", "release/*"]
                }
            },
            environment: {
                xcode: "15.2",
                node: "18.x",
                variables: [
                    { name: "NODE_ENV", value: "production" },
                    { name: "CI", value: "true" },
                    { name: "EXPO_PUBLIC_ENV", value: "staging" },
                    { name: "IOS_BUNDLE_IDENTIFIER", value: "$IOS_BUNDLE_IDENTIFIER" },
                    { name: "DEVELOPMENT_TEAM", value: "$DEVELOPMENT_TEAM" },
                    { name: "APP_STORE_CONNECT_API_KEY_ID", value: "$APP_STORE_CONNECT_API_KEY_ID" },
                    { name: "APP_STORE_CONNECT_ISSUER_ID", value: "$APP_STORE_CONNECT_ISSUER_ID" }
                ]
            },
            steps: [
                {
                    name: "Install Dependencies",
                    script: `set -e
echo "üîß Instalando depend√™ncias de produ√ß√£o..."
npm ci --production=false
npx expo install --fix`
                },
                {
                    name: "Run Full Test Suite",
                    script: `set -e
echo "üß™ Executando suite completa de testes..."
npm run test:full || npm test -- --coverage --watchAll=false
npm run lint
npm run type-check || echo "‚ö†Ô∏è Type checking n√£o configurado"`
                },
                {
                    name: "Build Assets",
                    script: `set -e
echo "üé® Construindo assets..."
npm run build:assets || echo "‚ö†Ô∏è Build de assets n√£o configurado"`
                },
                {
                    name: "Generate iOS Project",
                    script: `set -e
echo "üì± Gerando projeto iOS para staging..."
npx expo prebuild --platform ios --clean --no-install`
                },
                {
                    name: "Install CocoaPods",
                    script: `set -e
echo "üç´ Instalando CocoaPods..."
cd ios
pod install --repo-update
cd ..`
                },
                {
                    name: "Configure Code Signing",
                    script: `set -e
echo "üîê Configurando assinatura de c√≥digo..."
cd ios
# Configurar provisioning profiles automaticamente
xcodebuild -workspace ${this.projectInfo.workspace} \\
  -scheme ${this.projectInfo.scheme} \\
  -configuration Release \\
  -allowProvisioningUpdates \\
  -destination generic/platform=iOS \\
  clean`
                },
                {
                    name: "Build and Archive",
                    script: `set -e
echo "üèóÔ∏è Construindo e arquivando para TestFlight..."
cd ios
xcodebuild -workspace ${this.projectInfo.workspace} \\
  -scheme ${this.projectInfo.scheme} \\
  -configuration Release \\
  -destination generic/platform=iOS \\
  -archivePath ${this.projectInfo.appName}.xcarchive \\
  -allowProvisioningUpdates \\
  archive`
                },
                {
                    name: "Export for TestFlight",
                    script: `set -e
echo "üì§ Exportando para TestFlight..."
cd ios
xcodebuild -exportArchive \\
  -archivePath ${this.projectInfo.appName}.xcarchive \\
  -exportPath ./build \\
  -exportOptionsPlist exportOptions.plist \\
  -allowProvisioningUpdates`
                },
                {
                    name: "Upload to TestFlight",
                    script: `set -e
echo "üöÄ Enviando para TestFlight..."
cd ios
xcrun altool --upload-app \\
  --type ios \\
  --file "./build/${this.projectInfo.appName}.ipa" \\
  --apiKey $APP_STORE_CONNECT_API_KEY_ID \\
  --apiIssuer $APP_STORE_CONNECT_ISSUER_ID \\
  --verbose`
                }
            ]
        };
        
        const filePath = path.join(this.workflowsDir, 'staging.json');
        fs.writeFileSync(filePath, JSON.stringify(workflow, null, 2));
        console.log(`  ‚úÖ Salvo em: ${filePath}`);
    }

    async createProductionWorkflow() {
        console.log('üöÄ Criando workflow de produ√ß√£o...');
        
        const workflow = {
            name: "Production Release",
            description: "Build final para App Store com valida√ß√µes completas",
            trigger: {
                push: {
                    branches: ["main", "master"]
                },
                tag: {
                    pattern: "v*.*.*"
                }
            },
            environment: {
                xcode: "15.2",
                node: "18.x",
                variables: [
                    { name: "NODE_ENV", value: "production" },
                    { name: "CI", value: "true" },
                    { name: "EXPO_PUBLIC_ENV", value: "production" },
                    { name: "IOS_BUNDLE_IDENTIFIER", value: "$IOS_BUNDLE_IDENTIFIER" },
                    { name: "DEVELOPMENT_TEAM", value: "$DEVELOPMENT_TEAM" },
                    { name: "APP_STORE_CONNECT_API_KEY_ID", value: "$APP_STORE_CONNECT_API_KEY_ID" },
                    { name: "APP_STORE_CONNECT_ISSUER_ID", value: "$APP_STORE_CONNECT_ISSUER_ID" },
                    { name: "APP_STORE_CONNECT_PRIVATE_KEY", value: "$APP_STORE_CONNECT_PRIVATE_KEY" }
                ]
            },
            steps: [
                {
                    name: "Validate Release",
                    script: `set -e
echo "üîç Validando release..."
# Verificar se √© uma tag de vers√£o v√°lida
if [[ "$CI_TAG" =~ ^v[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then
  echo "‚úÖ Tag de vers√£o v√°lida: $CI_TAG"
else
  echo "‚ùå Tag de vers√£o inv√°lida. Use formato: v1.0.0"
  exit 1
fi`
                },
                {
                    name: "Install Dependencies",
                    script: `set -e
echo "üîß Instalando depend√™ncias de produ√ß√£o..."
npm ci --production=false
npx expo install --fix`
                },
                {
                    name: "Security Audit",
                    script: `set -e
echo "üîí Executando auditoria de seguran√ßa..."
npm audit --audit-level moderate
npm run security:check || echo "‚ö†Ô∏è Security check n√£o configurado"`
                },
                {
                    name: "Run Complete Test Suite",
                    script: `set -e
echo "üß™ Executando suite completa de testes..."
npm run test:full || npm test -- --coverage --watchAll=false
npm run lint
npm run type-check || echo "‚ö†Ô∏è Type checking n√£o configurado"
npm run test:e2e || echo "‚ö†Ô∏è Testes E2E n√£o configurados"`
                },
                {
                    name: "Build Production Assets",
                    script: `set -e
echo "üé® Construindo assets de produ√ß√£o..."
npm run build:production || npm run build || echo "‚ö†Ô∏è Build n√£o configurado"`
                },
                {
                    name: "Generate iOS Project",
                    script: `set -e
echo "üì± Gerando projeto iOS para produ√ß√£o..."
npx expo prebuild --platform ios --clean --no-install`
                },
                {
                    name: "Install CocoaPods",
                    script: `set -e
echo "üç´ Instalando CocoaPods..."
cd ios
pod install --repo-update
cd ..`
                },
                {
                    name: "Validate Project Configuration",
                    script: `set -e
echo "üîç Validando configura√ß√£o do projeto..."
cd ios
# Verificar Bundle ID
grep -q "${this.projectInfo.bundleId}" ${this.projectInfo.appName}/Info.plist || {
  echo "‚ùå Bundle ID incorreto no Info.plist"
  exit 1
}
echo "‚úÖ Configura√ß√£o do projeto validada"`
                },
                {
                    name: "Build and Archive for Production",
                    script: `set -e
echo "üèóÔ∏è Construindo vers√£o de produ√ß√£o..."
cd ios
xcodebuild -workspace ${this.projectInfo.workspace} \\
  -scheme ${this.projectInfo.scheme} \\
  -configuration Release \\
  -destination generic/platform=iOS \\
  -archivePath ${this.projectInfo.appName}.xcarchive \\
  -allowProvisioningUpdates \\
  archive`
                },
                {
                    name: "Export for App Store",
                    script: `set -e
echo "üì§ Exportando para App Store..."
cd ios
xcodebuild -exportArchive \\
  -archivePath ${this.projectInfo.appName}.xcarchive \\
  -exportPath ./build \\
  -exportOptionsPlist exportOptions.plist \\
  -allowProvisioningUpdates`
                },
                {
                    name: "Upload to App Store",
                    script: `set -e
echo "üöÄ Enviando para App Store..."
cd ios
xcrun altool --upload-app \\
  --type ios \\
  --file "./build/${this.projectInfo.appName}.ipa" \\
  --apiKey $APP_STORE_CONNECT_API_KEY_ID \\
  --apiIssuer $APP_STORE_CONNECT_ISSUER_ID \\
  --verbose`
                },
                {
                    name: "Create Release Notes",
                    script: `set -e
echo "üìù Criando notas de release..."
echo "Release $CI_TAG enviado para App Store" > release-notes.txt
echo "Build: $CI_BUILD_NUMBER" >> release-notes.txt
echo "Commit: $CI_COMMIT_SHA" >> release-notes.txt
echo "Data: $(date)" >> release-notes.txt`
                }
            ]
        };
        
        const filePath = path.join(this.workflowsDir, 'production.json');
        fs.writeFileSync(filePath, JSON.stringify(workflow, null, 2));
        console.log(`  ‚úÖ Salvo em: ${filePath}`);
    }

    async createHotfixWorkflow() {
        console.log('üî• Criando workflow de hotfix...');
        
        const workflow = {
            name: "Hotfix Build",
            description: "Build urgente para corre√ß√µes cr√≠ticas",
            trigger: {
                push: {
                    branches: ["hotfix/*"]
                }
            },
            environment: {
                xcode: "15.2",
                node: "18.x",
                variables: [
                    { name: "NODE_ENV", value: "production" },
                    { name: "CI", value: "true" },
                    { name: "EXPO_PUBLIC_ENV", value: "production" },
                    { name: "IOS_BUNDLE_IDENTIFIER", value: "$IOS_BUNDLE_IDENTIFIER" },
                    { name: "DEVELOPMENT_TEAM", value: "$DEVELOPMENT_TEAM" },
                    { name: "APP_STORE_CONNECT_API_KEY_ID", value: "$APP_STORE_CONNECT_API_KEY_ID" },
                    { name: "APP_STORE_CONNECT_ISSUER_ID", value: "$APP_STORE_CONNECT_ISSUER_ID" }
                ]
            },
            steps: [
                {
                    name: "Fast Install",
                    script: `set -e
echo "‚ö° Instala√ß√£o r√°pida para hotfix..."
npm ci --prefer-offline`
                },
                {
                    name: "Critical Tests Only",
                    script: `set -e
echo "üß™ Executando apenas testes cr√≠ticos..."
npm run test:critical || npm test -- --testPathPattern="critical" || echo "‚ö†Ô∏è Testes cr√≠ticos n√£o configurados"`
                },
                {
                    name: "Generate iOS Project",
                    script: `set -e
echo "üì± Gerando projeto iOS para hotfix..."
npx expo prebuild --platform ios --clean --no-install`
                },
                {
                    name: "Install CocoaPods",
                    script: `set -e
echo "üç´ Instalando CocoaPods..."
cd ios && pod install && cd ..`
                },
                {
                    name: "Build and Archive Hotfix",
                    script: `set -e
echo "üî• Construindo hotfix..."
cd ios
xcodebuild -workspace ${this.projectInfo.workspace} \\
  -scheme ${this.projectInfo.scheme} \\
  -configuration Release \\
  -destination generic/platform=iOS \\
  -archivePath ${this.projectInfo.appName}-hotfix.xcarchive \\
  -allowProvisioningUpdates \\
  archive`
                },
                {
                    name: "Upload Hotfix to TestFlight",
                    script: `set -e
echo "üöÄ Enviando hotfix para TestFlight..."
cd ios
xcodebuild -exportArchive \\
  -archivePath ${this.projectInfo.appName}-hotfix.xcarchive \\
  -exportPath ./build \\
  -exportOptionsPlist exportOptions.plist
  
xcrun altool --upload-app \\
  --type ios \\
  --file "./build/${this.projectInfo.appName}.ipa" \\
  --apiKey $APP_STORE_CONNECT_API_KEY_ID \\
  --apiIssuer $APP_STORE_CONNECT_ISSUER_ID`
                }
            ]
        };
        
        const filePath = path.join(this.workflowsDir, 'hotfix.json');
        fs.writeFileSync(filePath, JSON.stringify(workflow, null, 2));
        console.log(`  ‚úÖ Salvo em: ${filePath}`);
    }

    async createReleaseWorkflow() {
        console.log('üì¶ Criando workflow de release...');
        
        const workflow = {
            name: "Release Preparation",
            description: "Prepara√ß√£o e valida√ß√£o de releases",
            trigger: {
                push: {
                    branches: ["release/*"]
                }
            },
            environment: {
                xcode: "15.2",
                node: "18.x",
                variables: [
                    { name: "NODE_ENV", value: "production" },
                    { name: "CI", value: "true" },
                    { name: "EXPO_PUBLIC_ENV", value: "staging" }
                ]
            },
            steps: [
                {
                    name: "Install Dependencies",
                    script: `set -e
echo "üîß Instalando depend√™ncias..."
npm ci`
                },
                {
                    name: "Version Validation",
                    script: `set -e
echo "üîç Validando vers√£o..."
npm run version:check || echo "‚ö†Ô∏è Version check n√£o configurado"
npm run changelog:validate || echo "‚ö†Ô∏è Changelog validation n√£o configurada"`
                },
                {
                    name: "Run All Tests",
                    script: `set -e
echo "üß™ Executando todos os testes..."
npm run test:all || npm test -- --coverage --watchAll=false
npm run lint
npm run type-check || echo "‚ö†Ô∏è Type checking n√£o configurado"`
                },
                {
                    name: "Build Documentation",
                    script: `set -e
echo "üìö Construindo documenta√ß√£o..."
npm run docs:build || echo "‚ö†Ô∏è Build de documenta√ß√£o n√£o configurado"`
                },
                {
                    name: "Generate iOS Project",
                    script: `set -e
echo "üì± Gerando projeto iOS..."
npx expo prebuild --platform ios --clean --no-install`
                },
                {
                    name: "Validate iOS Build",
                    script: `set -e
echo "üîç Validando build iOS..."
cd ios
pod install
xcodebuild -workspace ${this.projectInfo.workspace} \\
  -scheme ${this.projectInfo.scheme} \\
  -configuration Release \\
  -destination 'platform=iOS Simulator,name=iPhone 15' \\
  build`
                }
            ]
        };
        
        const filePath = path.join(this.workflowsDir, 'release.json');
        fs.writeFileSync(filePath, JSON.stringify(workflow, null, 2));
        console.log(`  ‚úÖ Salvo em: ${filePath}`);
    }

    async createMainWorkflowFile() {
        console.log('üìÑ Criando arquivo principal de workflow...');
        
        const mainWorkflow = `version: 1

workflows:
  development:
    name: "Development Build"
    description: "Build r√°pido para desenvolvimento com testes b√°sicos"
    trigger:
      push:
        branch:
          - develop
          - feature/*
          - bugfix/*
      pull_request:
        branch:
          - develop
    environment:
      xcode: "15.2"
      node: "18.x"
      variables:
        - name: NODE_ENV
          value: development
        - name: CI
          value: "true"
        - name: EXPO_PUBLIC_ENV
          value: development
    steps:
      - name: Install Dependencies
        script: |
          set -e
          echo "üîß Instalando depend√™ncias..."
          npm ci
          npx expo install --fix
      - name: Run Tests
        script: |
          set -e
          echo "üß™ Executando testes..."
          npm test -- --coverage --watchAll=false
      - name: Generate iOS Project
        script: |
          set -e
          echo "üì± Gerando projeto iOS..."
          npx expo prebuild --platform ios --clean --no-install
      - name: Install CocoaPods
        script: |
          set -e
          echo "üç´ Instalando CocoaPods..."
          cd ios && pod install && cd ..

  staging:
    name: "Staging Build"
    description: "Build para TestFlight com testes completos"
    trigger:
      push:
        branch:
          - staging
          - release/*
    environment:
      xcode: "15.2"
      node: "18.x"
      variables:
        - name: NODE_ENV
          value: production
        - name: CI
          value: "true"
        - name: EXPO_PUBLIC_ENV
          value: staging
        - name: IOS_BUNDLE_IDENTIFIER
          value: $IOS_BUNDLE_IDENTIFIER
        - name: DEVELOPMENT_TEAM
          value: $DEVELOPMENT_TEAM
        - name: APP_STORE_CONNECT_API_KEY_ID
          value: $APP_STORE_CONNECT_API_KEY_ID
        - name: APP_STORE_CONNECT_ISSUER_ID
          value: $APP_STORE_CONNECT_ISSUER_ID
    steps:
      - name: Install Dependencies
        script: |
          set -e
          echo "üîß Instalando depend√™ncias..."
          npm ci
          npx expo install --fix
      - name: Run Tests
        script: |
          set -e
          echo "üß™ Executando testes..."
          npm test -- --coverage --watchAll=false
          npm run lint
      - name: Generate iOS Project
        script: |
          set -e
          echo "üì± Gerando projeto iOS..."
          npx expo prebuild --platform ios --clean --no-install
      - name: Install CocoaPods
        script: |
          set -e
          echo "üç´ Instalando CocoaPods..."
          cd ios && pod install --repo-update && cd ..
      - name: Build and Archive
        script: |
          set -e
          echo "üèóÔ∏è Construindo e arquivando..."
          cd ios
          xcodebuild -workspace ${this.projectInfo.workspace} \\
            -scheme ${this.projectInfo.scheme} \\
            -configuration Release \\
            -destination generic/platform=iOS \\
            -archivePath ${this.projectInfo.appName}.xcarchive \\
            -allowProvisioningUpdates \\
            archive
      - name: Upload to TestFlight
        script: |
          set -e
          echo "üöÄ Enviando para TestFlight..."
          cd ios
          xcodebuild -exportArchive \\
            -archivePath ${this.projectInfo.appName}.xcarchive \\
            -exportPath ./build \\
            -exportOptionsPlist exportOptions.plist
          xcrun altool --upload-app \\
            --type ios \\
            --file "./build/${this.projectInfo.appName}.ipa" \\
            --apiKey $APP_STORE_CONNECT_API_KEY_ID \\
            --apiIssuer $APP_STORE_CONNECT_ISSUER_ID

  production:
    name: "Production Release"
    description: "Build final para App Store"
    trigger:
      push:
        branch:
          - main
          - master
      tag:
        pattern: "v*.*.*"
    environment:
      xcode: "15.2"
      node: "18.x"
      variables:
        - name: NODE_ENV
          value: production
        - name: CI
          value: "true"
        - name: EXPO_PUBLIC_ENV
          value: production
        - name: IOS_BUNDLE_IDENTIFIER
          value: $IOS_BUNDLE_IDENTIFIER
        - name: DEVELOPMENT_TEAM
          value: $DEVELOPMENT_TEAM
        - name: APP_STORE_CONNECT_API_KEY_ID
          value: $APP_STORE_CONNECT_API_KEY_ID
        - name: APP_STORE_CONNECT_ISSUER_ID
          value: $APP_STORE_CONNECT_ISSUER_ID
        - name: APP_STORE_CONNECT_PRIVATE_KEY
          value: $APP_STORE_CONNECT_PRIVATE_KEY
    steps:
      - name: Install Dependencies
        script: |
          set -e
          echo "üîß Instalando depend√™ncias de produ√ß√£o..."
          npm ci --production=false
          npx expo install --fix
      - name: Run Full Test Suite
        script: |
          set -e
          echo "üß™ Executando suite completa de testes..."
          npm test -- --coverage --watchAll=false
          npm run lint
      - name: Generate iOS Project
        script: |
          set -e
          echo "üì± Gerando projeto iOS de produ√ß√£o..."
          npx expo prebuild --platform ios --clean --no-install
      - name: Install CocoaPods
        script: |
          set -e
          echo "üç´ Instalando CocoaPods..."
          cd ios && pod install --repo-update && cd ..
      - name: Build and Archive for Production
        script: |
          set -e
          echo "üèóÔ∏è Construindo vers√£o de produ√ß√£o..."
          cd ios
          xcodebuild -workspace ${this.projectInfo.workspace} \\
            -scheme ${this.projectInfo.scheme} \\
            -configuration Release \\
            -destination generic/platform=iOS \\
            -archivePath ${this.projectInfo.appName}.xcarchive \\
            -allowProvisioningUpdates \\
            archive
      - name: Upload to App Store
        script: |
          set -e
          echo "üöÄ Enviando para App Store..."
          cd ios
          xcodebuild -exportArchive \\
            -archivePath ${this.projectInfo.appName}.xcarchive \\
            -exportPath ./build \\
            -exportOptionsPlist exportOptions.plist
          xcrun altool --upload-app \\
            --type ios \\
            --file "./build/${this.projectInfo.appName}.ipa" \\
            --apiKey $APP_STORE_CONNECT_API_KEY_ID \\
            --apiIssuer $APP_STORE_CONNECT_ISSUER_ID
`;
        
        const mainWorkflowPath = path.join(this.projectRoot, '.xcode-cloud.yml');
        fs.writeFileSync(mainWorkflowPath, mainWorkflow);
        console.log(`  ‚úÖ Arquivo principal salvo em: ${mainWorkflowPath}`);
    }

    async createWorkflowDocumentation() {
        console.log('üìö Criando documenta√ß√£o dos workflows...');
        
        const documentation = `# üîÑ DOCUMENTA√á√ÉO DOS WORKFLOWS DO XCODE CLOUD

## üìã VIS√ÉO GERAL

Este documento descreve todos os workflows configurados para o PsiqueiaApp no Xcode Cloud.

## üîß WORKFLOW: DEVELOPMENT

**Objetivo**: Builds r√°pidos para desenvolvimento e testes b√°sicos

### üéØ Triggers
- Push para branches: \`develop\`, \`feature/*\`, \`bugfix/*\`
- Pull requests para: \`develop\`

### ‚öôÔ∏è Ambiente
- Xcode: 15.2
- Node.js: 18.x
- Ambiente: Development

### üìù Passos
1. **Install Dependencies** - Instala depend√™ncias Node.js
2. **Run Tests** - Executa testes unit√°rios com coverage
3. **Generate iOS Project** - Gera projeto nativo iOS
4. **Install CocoaPods** - Instala depend√™ncias iOS

### ‚è±Ô∏è Tempo Estimado: 5-8 minutos

---

## üß™ WORKFLOW: STAGING

**Objetivo**: Builds para TestFlight com valida√ß√µes completas

### üéØ Triggers
- Push para branches: \`staging\`, \`release/*\`

### ‚öôÔ∏è Ambiente
- Xcode: 15.2
- Node.js: 18.x
- Ambiente: Staging/Production

### üìù Passos
1. **Install Dependencies** - Instala todas as depend√™ncias
2. **Run Tests** - Executa testes + lint
3. **Generate iOS Project** - Gera projeto iOS otimizado
4. **Install CocoaPods** - Instala pods com repo update
5. **Build and Archive** - Constr√≥i e arquiva o app
6. **Upload to TestFlight** - Envia para TestFlight automaticamente

### ‚è±Ô∏è Tempo Estimado: 15-20 minutos

---

## üöÄ WORKFLOW: PRODUCTION

**Objetivo**: Builds finais para App Store com m√°xima qualidade

### üéØ Triggers
- Push para branches: \`main\`, \`master\`
- Tags no formato: \`v*.*.*\` (ex: v1.0.0)

### ‚öôÔ∏è Ambiente
- Xcode: 15.2
- Node.js: 18.x
- Ambiente: Production

### üìù Passos
1. **Install Dependencies** - Instala depend√™ncias de produ√ß√£o
2. **Run Full Test Suite** - Suite completa de testes + lint
3. **Generate iOS Project** - Projeto iOS de produ√ß√£o
4. **Install CocoaPods** - CocoaPods com repo update
5. **Build and Archive for Production** - Build otimizado
6. **Upload to App Store** - Submiss√£o autom√°tica para App Store

### ‚è±Ô∏è Tempo Estimado: 20-25 minutos

---

## üî• WORKFLOW: HOTFIX

**Objetivo**: Corre√ß√µes urgentes com build acelerado

### üéØ Triggers
- Push para branches: \`hotfix/*\`

### ‚öôÔ∏è Ambiente
- Xcode: 15.2
- Node.js: 18.x
- Ambiente: Production

### üìù Passos
1. **Fast Install** - Instala√ß√£o r√°pida com cache
2. **Critical Tests Only** - Apenas testes cr√≠ticos
3. **Generate iOS Project** - Gera√ß√£o r√°pida do projeto
4. **Install CocoaPods** - Instala√ß√£o b√°sica de pods
5. **Build and Archive Hotfix** - Build de hotfix
6. **Upload Hotfix to TestFlight** - Envio direto para TestFlight

### ‚è±Ô∏è Tempo Estimado: 8-12 minutos

---

## üì¶ WORKFLOW: RELEASE

**Objetivo**: Prepara√ß√£o e valida√ß√£o de releases

### üéØ Triggers
- Push para branches: \`release/*\`

### ‚öôÔ∏è Ambiente
- Xcode: 15.2
- Node.js: 18.x
- Ambiente: Staging

### üìù Passos
1. **Install Dependencies** - Instala√ß√£o completa
2. **Version Validation** - Valida√ß√£o de vers√£o e changelog
3. **Run All Tests** - Todos os testes + lint + type check
4. **Build Documentation** - Constr√≥i documenta√ß√£o
5. **Generate iOS Project** - Projeto iOS para valida√ß√£o
6. **Validate iOS Build** - Valida√ß√£o do build iOS

### ‚è±Ô∏è Tempo Estimado: 12-15 minutos

---

## üîÑ ESTRAT√âGIA DE BRANCHING

### üìä Fluxo Recomendado

\`\`\`
main/master     üöÄ Production (App Store)
    ‚Üë
staging         üß™ Staging (TestFlight)
    ‚Üë
develop         üîß Development (Testes)
    ‚Üë
feature/*       üí° Features
bugfix/*        üêõ Bug fixes
hotfix/*        üî• Hotfixes urgentes
release/*       üì¶ Prepara√ß√£o de releases
\`\`\`

### üéØ Quando Usar Cada Branch

- **feature/*** ‚Üí Novas funcionalidades
- **bugfix/*** ‚Üí Corre√ß√µes de bugs
- **develop** ‚Üí Integra√ß√£o de features
- **staging** ‚Üí Prepara√ß√£o para release
- **release/*** ‚Üí Finaliza√ß√£o de vers√µes
- **hotfix/*** ‚Üí Corre√ß√µes urgentes
- **main/master** ‚Üí Vers√£o de produ√ß√£o

---

## üîß CONFIGURA√á√ÉO DE VARI√ÅVEIS

### üîë Vari√°veis Obrigat√≥rias

\`\`\`
APP_STORE_CONNECT_API_KEY_ID=${this.projectInfo.apiKeyId}
APP_STORE_CONNECT_ISSUER_ID=[SEU_ISSUER_ID]
DEVELOPMENT_TEAM=[SEU_TEAM_ID]
IOS_BUNDLE_IDENTIFIER=${this.projectInfo.bundleId}
CODE_SIGNING_STYLE=Automatic
CI=true
\`\`\`

### üîß Vari√°veis Opcionais

\`\`\`
EXPO_TOKEN=[SEU_EXPO_TOKEN]
NODE_ENV=production
EXPO_PUBLIC_ENV=production
\`\`\`

---

## üìä MONITORAMENTO

### üéØ M√©tricas Importantes

- **Build Success Rate**: >95%
- **Build Time**: <20 minutos
- **Test Coverage**: >80%
- **Failed Builds**: <5%

### üìà Dashboards

- App Store Connect ‚Üí Xcode Cloud ‚Üí Analytics
- Builds por branch
- Tempo m√©dio de build
- Taxa de sucesso

---

## üö® TROUBLESHOOTING

### ‚ùå Problemas Comuns

**Build Failed: Dependencies**
\`\`\`bash
# Solu√ß√£o
npm ci --force
npx expo install --fix
\`\`\`

**Build Failed: CocoaPods**
\`\`\`bash
# Solu√ß√£o
cd ios
rm -rf Pods Podfile.lock
pod install --repo-update
\`\`\`

**Build Failed: Code Signing**
- Verificar DEVELOPMENT_TEAM
- Confirmar Bundle ID
- Validar certificados no Apple Developer Portal

**Build Failed: Archive**
- Verificar configura√ß√£o de Release
- Confirmar provisioning profiles
- Validar entitlements

### üîç Debug Steps

1. Verificar logs do Xcode Cloud
2. Validar vari√°veis de ambiente
3. Testar build local
4. Verificar configura√ß√µes do projeto

---

## üìû SUPORTE

### üìö Recursos

- [Xcode Cloud Documentation](https://developer.apple.com/xcode-cloud/)
- [Expo Documentation](https://docs.expo.dev/)
- [Apple Developer Portal](https://developer.apple.com/)

### üõ†Ô∏è Scripts √öteis

\`\`\`bash
# Validar configura√ß√£o
node xcode-cloud-configs/scripts/validate-xcode-cloud.js

# Verificar status
node scripts/check-deployment-status.js

# Build local
npx expo prebuild --platform ios --clean
cd ios && xcodebuild -workspace ${this.projectInfo.workspace} -scheme ${this.projectInfo.scheme} build
\`\`\`

---

## üéâ CONCLUS√ÉO

Com estes workflows configurados, voc√™ tem:

- ‚úÖ **CI/CD Completo** - Automa√ß√£o total do pipeline
- ‚úÖ **Builds Otimizados** - Diferentes estrat√©gias por ambiente
- ‚úÖ **Qualidade Garantida** - Testes e valida√ß√µes autom√°ticas
- ‚úÖ **Deploy Autom√°tico** - TestFlight e App Store autom√°ticos
- ‚úÖ **Monitoramento** - Visibilidade completa do processo

**Seu pipeline est√° pronto para produ√ß√£o! üöÄ**
`;
        
        const docPath = path.join(this.workflowsDir, 'WORKFLOWS_DOCUMENTATION.md');
        fs.writeFileSync(docPath, documentation);
        console.log(`  ‚úÖ Documenta√ß√£o salva em: ${docPath}`);
    }
}

// Executar cria√ß√£o de workflows
const workflowManager = new XcodeCloudWorkflowManager();
workflowManager.createAllWorkflows().catch(console.error);